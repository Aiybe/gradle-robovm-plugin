apply plugin: 'signing'

project.ext.sonatypeUsername = hasProperty('sonatypeUsername') ? sonatypeUsername : ""
project.ext.sonatypePassword = hasProperty('sonatypePassword') ? sonatypePassword : ""

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            beforeDeployment { MavenDeployment deployment -> 
                if (project.ext.sonatypeUsername.length() == 0 || project.ext.sonatypePassword.length() == 0) {
                    throw new StopExecutionException("uploadArchives cannot be called without sonatype username and password")
                }
                
                signing.signPom(deployment) 
            }
            pom.project {
                name 'Gradle RoboVM Plugin'
                packaging 'jar'
                description 'The Gradle RoboVM Plugin provides a way to build RoboVM based distribution bundles.'
                url 'https://github.com/jtakakura/gradle-robovm-plugin'
                scm {
                    url 'git@github.com:jtakakura/gradle-robovm-plugin.git'
                    connection 'scm:git:git@github.com:jtakakura/gradle-robovm-plugin.git'
                    developerConnection 'scm:git:git@github.com:jtakakura/gradle-robovm-plugin.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id sonatypeUsername
                        name sonatypeFullname
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required = { gradle.taskGraph.hasTask(uploadArchives) && !version.endsWith("SNAPSHOT") }
    sign configurations.archives
}
